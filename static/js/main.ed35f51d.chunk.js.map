{"version":3,"sources":["assets/metamask.svg","components/MetaMaskIcon.tsx","services/ethereum/SubscriptionContract.ts","hooks/useSubscriptionContract.tsx","hooks/useWeb3.tsx","context/SmartContractContext.tsx","components/Login.tsx","components/PrivateRoute.tsx","components/Admin.tsx","components/Subscriber.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["MetaMaskIcon","src","MetaMask","alt","SubscriptionContract","_web3","abi","address","contractInstance","this","eth","Contract","from","value","a","methods","subscribe","send","getBalance","call","withdraw","remove","getSubscriptionData","of","getDataOfSubscriber","getAllSubscribers","owner","subscriptionBaseValue","subscriptionValue","subscriptionDuration","callback","filter","events","SubscriptionSuccess","on","off","useSubscriptionContract","provider","useState","useWeb3","account","setAccount","Web3","window","ethereum","web3","connectToMetaMask","requestAccounts","accounts","length","useEffect","accountsChangedCallback","event","getAccountData","getAccounts","currentProvider","contractAddress","networks","process","SubscriptionContext","React","createContext","undefined","MetaMaskContext","AccountContext","SmartContractContextProvider","props","Provider","children","useSubscriptionContext","context","useContext","Error","useAccount","LoginStatus","Login","onSuccess","Disconnected","loginStatus","setLoginStatus","isOwner","setIsOwner","connect","useMetaMask","navigate","useNavigate","contract","onAccountChange","getAllContractData","toUpperCase","subscribed","Succeeded","Connected","loginSuccess","data","returnValues","subscribedAt","console","log","onSubscriptionSuccess","offSubscriptionSuccess","connectWallet","access","goToAdminPage","Modal","show","centered","Header","Title","Body","Footer","className","Button","variant","onClick","disabled","PrivateRoute","authCondition","to","Admin","contractData","setContractData","creationDate","setCreationDate","balance","setBalance","subscribers","setSubscribers","getData","useCallback","allContractData","contractBalance","subscribersList","Card","border","style","width","Subtitle","Date","Number","toLocaleString","Text","ListGroup","map","subscriber","Item","Subscriber","payedAmount","subscriberData","setSubscriberData","App","isSubscribed","setIsSubscribed","path","element","ownership","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ed35f51d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/metamask.09e5f554.svg\";","import React, { FC } from 'react';\nimport MetaMask from '../assets/metamask.svg';\nimport '../styles/MetaMaskIcon.scss';\n\nconst MetaMaskIcon: FC = () => {\n  return <img src={MetaMask} alt=\"MetaMask\" />;\n};\n\nexport default MetaMaskIcon;\n","import Web3 from 'web3';\nimport { Contract } from 'web3-eth-contract';\nimport { AbiItem } from 'web3-utils';\nimport IContractData from './IContractData';\nimport ISubscriberData from './ISubscriberData';\nimport ISubscriptionContract from './ISubscriptionContract';\n\nexport default class SubscriptionContract implements ISubscriptionContract {\n  private contractInstance: Contract;\n  constructor(_web3: Web3, abi: AbiItem[], address: string) {\n    this.contractInstance = new _web3.eth.Contract(abi, address);\n  }\n\n  async subscribe(from: string, value: number): Promise<void> {\n    return this.contractInstance.methods.subscribe().send({ from, value });\n  }\n\n  async getBalance(from: string): Promise<number> {\n    return this.contractInstance.methods.getBalance().call({ from });\n  }\n\n  async withdraw(from: string): Promise<void> {\n    return this.contractInstance.methods.withdraw().send({ from });\n  }\n\n  async remove(from: string): Promise<void> {\n    return this.contractInstance.methods.remove().send({ from });\n  }\n\n  async getSubscriptionData(from: string): Promise<ISubscriberData> {\n    return this.contractInstance.methods.getSubscriptionData().call({ from });\n  }\n\n  async getDataOfSubscriber(from: string, of: string): Promise<ISubscriberData> {\n    return this.contractInstance.methods.getDataOfSubscriber(of).call({ from });\n  }\n\n  async getAllSubscribers(from: string): Promise<string[]> {\n    return this.contractInstance.methods.getAllSubscribers().call({ from });\n  }\n\n  async getAllContractData(from: string): Promise<IContractData> {\n    const owner = await this.contractInstance.methods.owner().call({ from });\n    const subscriptionValue = await this.contractInstance.methods.subscriptionBaseValue().call({ from });\n    const subscriptionDuration = await this.contractInstance.methods.subscriptionDuration().call({ from });\n    return {\n      owner,\n      subscriptionValue,\n      subscriptionDuration,\n    };\n  }\n\n  onSubscriptionSuccess(from: string, callback: (data: any) => void) {\n    let filter = {};\n    if (from) {\n      filter = {\n        from,\n      };\n    }\n    this.contractInstance.events.SubscriptionSuccess({ filter }).on('data', callback);\n  }\n\n  offSubscriptionSuccess(from: string, callback: (data: any) => void) {\n    let filter = {};\n    if (from) {\n      filter = {\n        from,\n      };\n    }\n    this.contractInstance.events.SubscriptionSuccess({ filter }).off('data', callback);\n  }\n}\n","import { useState } from 'react';\nimport Web3 from 'web3';\nimport { AbiItem } from 'web3-utils';\nimport SubscriptionContract from '../services/ethereum/SubscriptionContract';\nimport ISubscriptionContract from '../services/ethereum/ISubscriptionContract';\n\nconst useSubscriptionContract = (provider: Web3, abi: AbiItem[], address: string) => {\n  const [contractInstance] = useState<ISubscriptionContract>(new SubscriptionContract(provider, abi, address));\n  return contractInstance;\n};\n\nexport default useSubscriptionContract;\n","import { useState, useEffect } from 'react';\nimport Web3 from 'web3';\n\nconst useWeb3 = () => {\n  const [account, setAccount] = useState<string>('');\n  const [web3] = useState<Web3>(new Web3((window as any).ethereum));\n\n  const connectToMetaMask = async () => {\n    const accounts = await web3.eth.requestAccounts();\n    setAccount(accounts.length ? accounts[0] : '');\n  };\n\n  useEffect(() => {\n    const accountsChangedCallback = (event: string[]): void => {\n      setAccount(event.length ? event[0] : '');\n    };\n\n    const getAccountData = async () => {\n      const accounts = await web3.eth.getAccounts();\n      if (!accounts.length) return;\n      setAccount(accounts[0]);\n    };\n\n    if (web3) {\n      (web3.currentProvider as any).on('accountsChanged', accountsChangedCallback);\n      getAccountData();\n    }\n    return () => {\n      (web3.currentProvider as any).off('accountsChanged', accountsChangedCallback);\n    };\n  }, [web3]);\n\n  return { web3, account, connectToMetaMask };\n};\n\nexport default useWeb3;\n","import React, { FC } from 'react';\nimport { AbiItem } from 'web3-utils';\nimport Web3 from 'web3';\nimport ISubscriptionContract from '../services/ethereum/ISubscriptionContract';\nimport useSubscriptionContract from '../hooks/useSubscriptionContract';\nimport useWeb3 from '../hooks/useWeb3';\nimport { abi, networks } from '../assets/Subscription.json';\n\nconst newtworkId = process.env.REACT_APP_EHTEREUM_NETWORK_ID;\nconst contractAddress = (networks as any)[newtworkId as string].address;\n\nconst SubscriptionContext = React.createContext<ISubscriptionContract | undefined>(undefined);\nconst MetaMaskContext = React.createContext<(() => Promise<void>) | undefined>(undefined);\nconst AccountContext = React.createContext<string>('');\n\ninterface ISmartContractContextProvider {\n  children: React.ReactNode;\n}\n\nconst SmartContractContextProvider: FC<ISmartContractContextProvider> = (props) => {\n  const { web3, account, connectToMetaMask } = useWeb3();\n  const contractInstance = useSubscriptionContract(web3 as Web3, abi as AbiItem[], contractAddress);\n  return (\n    <AccountContext.Provider value={account}>\n      <MetaMaskContext.Provider value={connectToMetaMask}>\n        <SubscriptionContext.Provider value={contractInstance}>{props.children}</SubscriptionContext.Provider>\n      </MetaMaskContext.Provider>\n    </AccountContext.Provider>\n  );\n};\n\nfunction useSubscriptionContext() {\n  const context = React.useContext(SubscriptionContext);\n  if (context === undefined) {\n    throw new Error('useSubscriptionContext must be used within an SmartContractContextProvider');\n  }\n  return context;\n}\n\nfunction useMetaMask() {\n  const context = React.useContext(MetaMaskContext);\n  if (context === undefined) {\n    throw new Error('useMetaMask must be used within an SmartContractContextProvider');\n  }\n  return context;\n}\n\nfunction useAccount() {\n  const context = React.useContext(AccountContext);\n  if (context === undefined) {\n    throw new Error('useAccount must be used within an SmartContractContextProvider');\n  }\n  return context;\n}\n\nexport { SmartContractContextProvider, useSubscriptionContext, useMetaMask, useAccount };\n","import React, { FC, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Button, Modal } from 'react-bootstrap';\nimport { FaLock } from 'react-icons/fa';\nimport MetaMaskIcon from './MetaMaskIcon';\nimport { useMetaMask, useAccount, useSubscriptionContext } from '../context/SmartContractContext';\nimport '../styles/Login.scss';\n\nenum LoginStatus {\n  Disconnected = 'DISCONNECTED',\n  Connected = 'CONNECTED',\n  Succeeded = 'SUCCEEDED',\n}\n\ninterface ILogin {\n  onSuccess: (isOwner: boolean) => void;\n}\n\nconst Login: FC<ILogin> = ({ onSuccess }: ILogin) => {\n  const [loginStatus, setLoginStatus] = useState<LoginStatus>(LoginStatus.Disconnected);\n  const [isOwner, setIsOwner] = useState(false);\n  const connect = useMetaMask();\n  const account = useAccount();\n  const navigate = useNavigate();\n  const contract = useSubscriptionContext();\n\n  // #region Account Change\n  useEffect(() => {\n    const onAccountChange = async () => {\n      if (!account || !contract) {\n        setLoginStatus(LoginStatus.Disconnected);\n        return;\n      }\n      const { owner } = await contract.getAllContractData(account);\n      setIsOwner(owner.toUpperCase() === account.toUpperCase());\n      const { subscribed } = await contract.getSubscriptionData(account);\n      setLoginStatus(subscribed ? LoginStatus.Succeeded : LoginStatus.Connected);\n    };\n    onAccountChange();\n  }, [account, contract]);\n  // #endregion\n\n  // #region Login Success\n  useEffect(() => {\n    if (loginStatus === LoginStatus.Succeeded) onSuccess(isOwner);\n  }, [loginStatus, isOwner, onSuccess]);\n  // #endregion\n\n  // #region SubscriptionSuccess event handling\n  const loginSuccess = (data: any) => {\n    const { from, subscribedAt } = data.returnValues;\n    console.log({ event: data.event, from, subscribedAt });\n    setLoginStatus(LoginStatus.Succeeded);\n  };\n\n  useEffect(() => {\n    contract.onSubscriptionSuccess(account, loginSuccess);\n    return () => {\n      contract.offSubscriptionSuccess(account, loginSuccess);\n    };\n  }, [contract, account]);\n  // #endregion\n\n  // #region Buttons Callback\n  const connectWallet = async () => {\n    await connect();\n    setLoginStatus(LoginStatus.Connected);\n  };\n\n  const subscribe = async () => {\n    const { subscriptionValue } = await contract.getAllContractData(account);\n    const { subscribed } = await contract.getSubscriptionData(account);\n    if (subscribed) {\n      setLoginStatus(LoginStatus.Succeeded);\n    } else {\n      await contract.subscribe(account, subscriptionValue);\n    }\n  };\n\n  const access = async () => {\n    navigate('/');\n  };\n\n  const goToAdminPage = async () => {\n    navigate('/admin');\n  };\n  // #endregion\n\n  return (\n    <Modal show centered>\n      <Modal.Header>\n        <Modal.Title>Connect your wallet and subscribe!</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        Contribute with just <b>0.01 ETH</b> and get access to awesome content.\n      </Modal.Body>\n      <Modal.Footer className=\"d-flex justify-content-center\">\n        {loginStatus === LoginStatus.Disconnected && (\n          <Button variant=\"primary\" onClick={connectWallet} className=\"d-flex\">\n            <MetaMaskIcon />\n            <div>Connect with MetaMask</div>\n          </Button>\n        )}\n        {loginStatus === LoginStatus.Connected && (\n          <>\n            Connected with wallet <b>{account}</b>\n            <Button variant=\"secondary\" onClick={subscribe} className=\"d-flex\">\n              <div>Subscribe Now!!</div>\n            </Button>\n          </>\n        )}\n        {loginStatus === LoginStatus.Succeeded && (\n          <>\n            Connected with wallet <b>{account}</b>\n            <Button variant=\"secondary\" onClick={access} className=\"d-flex\">\n              <div>Access Site</div>\n            </Button>\n            <Button variant=\"primary\" onClick={goToAdminPage} className=\"d-flex align-items-center\" disabled={!isOwner}>\n              <FaLock />\n              <div>Admin Page</div>\n            </Button>\n          </>\n        )}\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default Login;\n","import React, { FC } from 'react';\nimport { Navigate, Outlet } from 'react-router-dom';\n\ninterface IPrivateRoute {\n  authCondition: boolean;\n}\n\nconst PrivateRoute: FC<IPrivateRoute> = (props: IPrivateRoute) => {\n  return props.authCondition ? <Outlet /> : <Navigate to=\"/login\" />;\n};\n\nexport default PrivateRoute;\n","import React, { FC, useEffect, useState, useCallback } from 'react';\nimport { Card, ListGroup, Button } from 'react-bootstrap';\nimport { FaEthereum } from 'react-icons/fa';\nimport { useAccount, useSubscriptionContext } from '../context/SmartContractContext';\nimport IContractData from '../services/ethereum/IContractData';\nimport '../styles/Admin.scss';\n\nconst Admin: FC = () => {\n  const account = useAccount();\n  const contract = useSubscriptionContext();\n  const [contractData, setContractData] = useState<IContractData>({\n    owner: '',\n    subscriptionValue: 0,\n    subscriptionDuration: 0,\n  });\n  const [creationDate, setCreationDate] = useState(0);\n  const [balance, setBalance] = useState(0);\n  const [subscribers, setSubscribers] = useState<Array<string>>([]);\n\n  const getData = useCallback(async () => {\n    const allContractData = await contract.getAllContractData(account);\n    const { subscribedAt } = await contract.getSubscriptionData(account);\n    const contractBalance = await contract.getBalance(account);\n    const subscribersList = await contract.getAllSubscribers(account);\n    setCreationDate(subscribedAt);\n    setContractData(allContractData);\n    setBalance(contractBalance);\n    setSubscribers(subscribersList);\n  }, [account, contract]);\n\n  // #region Load initial data\n  useEffect(() => {\n    getData();\n    contract.onSubscriptionSuccess('', getData);\n\n    return () => {\n      contract.offSubscriptionSuccess('', getData);\n    };\n  }, [account, contract, getData]);\n  // #endregion\n\n  const withdraw = async () => {\n    await contract.withdraw(account);\n    getData();\n  };\n\n  return (\n    <Card border=\"dark\" style={{ width: '32rem' }}>\n      <Card.Header>Contract Information</Card.Header>\n      <Card.Body>\n        <Card.Title>Balance: {balance} WEI</Card.Title>\n        <Card.Subtitle className=\"mb-2 text-muted\">Cration date: {new Date(Number(creationDate * 1000)).toLocaleString()}</Card.Subtitle>\n        <Card.Subtitle className=\"mb-2 text-muted\"># of subscribers: {subscribers.length}</Card.Subtitle>\n        <Card.Subtitle className=\"mb-2 text-muted\">Subscription price: {contractData.subscriptionValue} WEI</Card.Subtitle>\n        <Card.Subtitle className=\"mb-2 text-muted\">Subscription duration: {contractData.subscriptionDuration / 60} min</Card.Subtitle>\n      </Card.Body>\n      <Card.Body>\n        <Card.Text className=\"text-muted\">Subscribers</Card.Text>\n        <ListGroup variant=\"flush\" className=\"subscriber-list\">\n          {subscribers.map((subscriber) => (\n            <ListGroup.Item className=\"text-muted\" key={subscriber}>\n              {subscriber}\n            </ListGroup.Item>\n          ))}\n        </ListGroup>\n      </Card.Body>\n      <Card.Body>\n        <Button variant=\"primary\" onClick={withdraw} className=\"d-flex align-items-center\">\n          <FaEthereum />\n          <div>Withdraw</div>\n        </Button>\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default Admin;\n","import React, { FC, useEffect, useState } from 'react';\nimport { Card, ListGroup } from 'react-bootstrap';\nimport { useAccount, useSubscriptionContext } from '../context/SmartContractContext';\nimport IContractData from '../services/ethereum/IContractData';\nimport ISubscriberData from '../services/ethereum/ISubscriberData';\n\nconst Subscriber: FC = () => {\n  const account = useAccount();\n  const contract = useSubscriptionContext();\n  const [subscriberData, setSubscriberData] = useState<ISubscriberData>({\n    subscribed: false,\n    payedAmount: 0,\n    subscribedAt: 0,\n  });\n  const [contractData, setContractData] = useState<IContractData>({\n    owner: '',\n    subscriptionValue: 0,\n    subscriptionDuration: 0,\n  });\n\n  useEffect(() => {\n    const getData = async () => {\n      const allContractData = await contract.getAllContractData(account);\n      const data = await contract.getSubscriptionData(account);\n      setSubscriberData(data);\n      setContractData(allContractData);\n    };\n\n    getData();\n  }, [account, contract]);\n\n  return (\n    <Card border=\"dark\" style={{ width: '32rem' }}>\n      <Card.Header>Your subscription</Card.Header>\n      <Card.Body>\n        <Card.Title>{account}</Card.Title>\n        <ListGroup variant=\"flush\">\n          <ListGroup.Item>\n            <b>Payed amount:</b> {subscriberData.payedAmount} WEI\n          </ListGroup.Item>\n          <ListGroup.Item>\n            <b>Valid From:</b> {new Date(Number(subscriberData.subscribedAt * 1000)).toLocaleString()}\n          </ListGroup.Item>\n          <ListGroup.Item>\n            <b>To:</b> {new Date((Number(subscriberData.subscribedAt) + Number(contractData.subscriptionDuration)) * 1000).toLocaleString()}\n          </ListGroup.Item>\n        </ListGroup>\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default Subscriber;\n","import React, { FC, useEffect, useState } from 'react';\nimport { Route, Routes, HashRouter } from 'react-router-dom';\nimport Login from './components/Login';\nimport PrivateRoute from './components/PrivateRoute';\nimport Admin from './components/Admin';\nimport Subscriber from './components/Subscriber';\nimport { useAccount } from './context/SmartContractContext';\nimport './styles/App.scss';\n\nconst App: FC = () => {\n  const account = useAccount();\n  const [isOwner, setIsOwner] = useState(false);\n  const [isSubscribed, setIsSubscribed] = useState(false);\n\n  const onSuccess = (ownership: boolean) => {\n    setIsSubscribed(true);\n    setIsOwner(ownership);\n  };\n\n  useEffect(() => {\n    setIsOwner(false);\n    setIsSubscribed(false);\n  }, [account]);\n\n  return (\n    <div className=\"app\">\n      <HashRouter>\n        <Routes>\n          <Route path=\"/login\" element={<Login onSuccess={onSuccess} />} />\n          <Route path=\"/admin\" element={<PrivateRoute authCondition={isOwner} />}>\n            <Route path=\"/admin\" element={<Admin />} />\n          </Route>\n          <Route path=\"/\" element={<PrivateRoute authCondition={isSubscribed} />}>\n            <Route path=\"/\" element={<Subscriber />} />\n          </Route>\n        </Routes>\n      </HashRouter>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/custom.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { SmartContractContextProvider } from './context/SmartContractContext';\n\nReactDOM.render(\n  <React.StrictMode>\n    <SmartContractContextProvider>\n      <App />\n    </SmartContractContextProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}